# Some part of this code was generated by Open-AI Chat-GPT
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt
import numpy as np
import pickle

from functions import EtoC


# Specify the filename of the pickle file
filename = 'ode_result.pkl'

# Load the `OdeResult` object from the pickle file
with open(filename, 'rb') as file:
    s = pickle.load(file)

# お絵描きする剛体のx幅、y奥行き、z高さ、
x = 0.5
y = 0.75
z = 2.0
verts = np.array([[-x/2, -y/2, -z/2],
                  [-x/2, -y/2, z/2],
                  [-x/2, y/2, -z/2],
                  [-x/2, y/2, z/2],
                  [x/2, -y/2, -z/2],
                  [x/2, -y/2, z/2],
                  [x/2, y/2, -z/2],
                  [x/2, y/2, z/2]])

# Define the 6 faces of the cube
faces = np.array([[0, 1, 3, 2],
                  [0, 4, 5, 1],
                  [0, 2, 6, 4],
                  [1, 5, 7, 3],
                  [2, 3, 7, 6],
                  [4, 6, 7, 5]])

# Define the color of each face
colors = ['blue', 'green', 'red', 'yellow', 'orange', 'purple']

# Set the limits of the plot
xlim = (-1, 1)
ylim = (-1, 1)
zlim = (-1, 1)

# Set up the figure and axes
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the initial cube
cube = Poly3DCollection(verts[faces], facecolors=colors, alpha=0.25)
ax.add_collection(cube)

# 剛体Aの Eular parameters の読み出し
E1 = s.y[3,:]
E2 = s.y[4,:]
E3 = s.y[5,:]
E4 = s.y[6,:]

# 剛体Aの位置ベクトルの読み出し
Rx = s.y[0,:]
Ry = s.y[1,:]
Rz = s.y[2,:]

# Define the rotation function
def rotate(i):
    # Define the rotation matrix
    C = EtoC(np.array([E1[i],E2[i],E3[i],E4[i]]))
    R = np.array([[Rx[i]],[Ry[i]],[Rz[i]]])
    # Rotate the vertices of the cube
    rotated_verts = (C @ verts.T).T + np.hstack((R,R,R,R,R,R,R,R)).T
    # Update the cube
    cube.set_verts(rotated_verts[faces])
    # Set the limits of the plot
    ax.set_xlim(xlim)
    ax.set_ylim(ylim)
    ax.set_zlim(zlim)
    # Set the labels of the axes
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    if i == total_frames - 1:
        ani.event_source.stop()

# Set up the animation
total_frames = len(E1)
ani = FuncAnimation(fig, rotate, frames=total_frames, interval=16.6)

# Show the animation
plt.show()
